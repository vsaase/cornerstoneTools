{"version":3,"sources":["webpack://cornerstoneTools/./tools/segmentation/InterpolationTool.js"],"names":["logger","getLogger","segmentationModule","getModule","InterpolationTool","props","defaultProps","name","supportedInteractionTypes","configuration","storeHistory","mixins","evt","_startPainting","getters","setters","eventData","detail","element","image","rows","columns","stackState","getToolState","stackData","data","imageIds","labelmap2D","labelmap3D","currentImageIdIndex","activeLabelmapIndex","imagesInRange","Array","from","length","v","k","paintEventData","previousPixeldataForImagesInRange","i","labelmap2DForImageIdIndex","labelmap2DByImageIdIndex","previousPixeldata","pixelData","slice","push","currentPoints","x","y","getPixelData","getSegmentArray","p1","map","activeSegmentIndex","setSegmentArray","console","log","changecount","changecandidates","reduce","a","b","j","interpolate","i1","i2","v1","v2","d","vnext","vi","operations","imageIdIndex","labelmaps2D","segmentSet","Set","iterator","values","segmentsOnLabelmap","done","next","value","canvasElementNeedsUpdate","newPixelData","diff","getDiffBetweenPixelData","pushState","triggerLabelmapModifiedEvent","external","cornerstone","updateImage","BaseTool"],"mappings":"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","file":"cornerstoneTools.937f250fcc828575dc51.hot-update.js","sourcesContent":["import external from './../../externalModules.js';\nimport BaseTool from './../base/BaseTool.js';\nimport { getModule } from './../../store/index.js';\nimport { triggerLabelmapModifiedEvent } from './../../util/segmentation';\nimport { getToolState } from '../../stateManagement/toolState.js';\nimport { getLogger } from '../../util/logger.js';\nimport { getDiffBetweenPixelData } from '../../util/segmentation';\n\nconst logger = getLogger('tools:InterpolationTool');\n\nconst segmentationModule = getModule('segmentation');\n\n/**\n * @public\n * @class InterpolationTool\n * @memberof Tools\n * @classdesc Tool for interpolating between segments across images.\n * @extends Tools.Base.BaseTool\n */\nexport default class InterpolationTool extends BaseTool {\n  constructor(props = {}) {\n    const defaultProps = {\n      name: 'Interpolation',\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: { storeHistory: false },\n      mixins: [],\n    };\n\n    super(props, defaultProps);\n  }\n\n  preMouseDownCallback(evt) {\n    this._startPainting(evt);\n\n    return true;\n  }\n\n  /**\n   *\n   * @abstract\n   * @event\n   * @param {Object} evt - The event.\n   * @returns {void}\n   */\n  _startPainting(evt) {\n    const { configuration, getters, setters } = segmentationModule;\n    const eventData = evt.detail;\n    const { element, image } = eventData;\n    const { rows, columns } = image;\n\n    const stackState = getToolState(element, 'stack');\n    const stackData = stackState.data[0];\n    const { imageIds } = stackData;\n\n    const {\n      labelmap2D,\n      labelmap3D,\n      currentImageIdIndex,\n      activeLabelmapIndex,\n    } = getters.labelmap2D(element);\n\n    let imagesInRange = Array.from({ length: imageIds.length }, (v, k) => k);\n\n    this.paintEventData = {\n      labelmap2D,\n      labelmap3D,\n      currentImageIdIndex,\n      activeLabelmapIndex,\n      imagesInRange,\n    };\n\n    if (configuration.storeHistory) {\n      const previousPixeldataForImagesInRange = [];\n\n      for (let i = 0; i < imagesInRange.length; i++) {\n        const labelmap2DForImageIdIndex = getters.labelmap2DByImageIdIndex(\n          labelmap3D,\n          i,\n          rows,\n          columns\n        );\n\n        const previousPixeldata = labelmap2DForImageIdIndex.pixelData.slice();\n\n        previousPixeldataForImagesInRange.push(previousPixeldata);\n      }\n\n      this.paintEventData.previousPixeldataForImagesInRange = previousPixeldataForImagesInRange;\n    }\n\n    const { x, y } = eventData.currentPoints.image;\n\n    if (x < 0 || x > columns || y < 0 || y > rows) {\n      return;\n    }\n\n    function getPixelData(i) {\n      const labelmap2DForImageIdIndex = getters.labelmap2DByImageIdIndex(\n        labelmap3D,\n        i,\n        rows,\n        columns\n      );\n      return labelmap2DForImageIdIndex.pixelData;\n    }\n\n    function getSegmentArray(i) {\n      const p1 = getPixelData(i);\n      return p1.map(x => x == labelmap3D.activeSegmentIndex);\n    }\n\n    function setSegmentArray(i, v) {\n      console.log('setting image ' + i);\n      var p1 = getPixelData(i);\n      var changecount = 0;\n      var changecandidates = v.reduce((a, b) => a + b, 0);\n      for (let j = 0; j < p1.length; j++) {\n        if (v[j] && p1[j] != labelmap3D.activeSegmentIndex) {\n          changecount++;\n        }\n        p1[j] = v[j] ? labelmap3D.activeSegmentIndex : p1[j];\n      }\n      console.log('changed ' + changecount + ' pixels of ' + changecandidates);\n    }\n\n    /* Algorithm for interpolation\n      find first image i1 with active segment\n      save segment as binary vector v1\n\n      until i2 > imagesInRange\n        find next image i2 with active segment\n        save segment as binary vector v2\n        d = i2 - i1\n        if d > 1\n          for i in i1+1 to i2-1\n            for j in 1:length(v1)\n              if v1[j] * (i2 - i)/d + v2[j] * (i - i1)/d > 0.5\n                v[j] = activesegment\n        v1 = v2\n        i1 = i2\n    */\n\n    function interpolate(i, i1, i2, v1, v2) {\n      const d = i2 - i1;\n      return v1.map(\n        (x, j) => (x * (i2 - i)) / d + (v2[j] * (i - i1)) / d >= 0.5\n      );\n      // var out = v1.slice();\n      // for (let j = 0; j < out.length; j++) {\n      //   out[j] = (v1[j] * (i2 - i)) / d + (v2[j] * (i - i1)) / d;\n      // }\n      // return out.map(Math.round);\n    }\n\n    let i1 = 0;\n    while (i1 < imagesInRange.length - 2) {\n      //find first image i1 with active segment\n      const v1 = getSegmentArray(i1); // get segment as binary vector v1\n      if (v1.reduce((a, b) => a + b, 0) == 0) {\n        //empty, try next\n        i1++;\n        continue;\n      }\n      const vnext = getSegmentArray(i1 + 1);\n      if (vnext.reduce((a, b) => a + b, 0) > 0) {\n        //next is not empty, no need to interpolate\n        i1++;\n        continue;\n      }\n      let i2 = i1 + 2;\n      while (i2 < imagesInRange.length) {\n        // find next image i2 with active segment\n        const v2 = getSegmentArray(i2);\n        if (v2.reduce((a, b) => a + b, 0) == 0) {\n          //empty, try next\n          i2++;\n          continue;\n        }\n        for (let i = i1 + 1; i < i2; i++) {\n          const vi = interpolate(i, i1, i2, v1, v2);\n          setSegmentArray(i, vi);\n        }\n        break;\n      }\n      i1 = i2;\n    }\n\n    const operations = [];\n\n    for (let i = 0; i < imagesInRange.length; i++) {\n      const imageIdIndex = imagesInRange[i];\n      const labelmap2D = labelmap3D.labelmaps2D[imagesInRange[i]];\n\n      // Grab the labels on the slice.\n      const segmentSet = new Set(labelmap2D.pixelData);\n      const iterator = segmentSet.values();\n\n      const segmentsOnLabelmap = [];\n      let done = false;\n\n      while (!done) {\n        const next = iterator.next();\n\n        done = next.done;\n\n        if (!done) {\n          segmentsOnLabelmap.push(next.value);\n        }\n      }\n\n      labelmap2D.segmentsOnLabelmap = segmentsOnLabelmap;\n      labelmap2D.canvasElementNeedsUpdate = true;\n\n      if (configuration.storeHistory) {\n        const { previousPixeldataForImagesInRange } = this.paintEventData;\n\n        const previousPixeldata = previousPixeldataForImagesInRange[i];\n        const labelmap2D = labelmap3D.labelmaps2D[imageIdIndex];\n        const newPixelData = labelmap2D.pixelData;\n\n        operations.push({\n          imageIdIndex,\n          diff: getDiffBetweenPixelData(previousPixeldata, newPixelData),\n        });\n      }\n    }\n\n    if (configuration.storeHistory) {\n      setters.pushState(this.element, operations);\n    }\n\n    triggerLabelmapModifiedEvent(this.element);\n    external.cornerstone.updateImage(evt.detail.element);\n    console.log(labelmap3D);\n  }\n}\n"],"sourceRoot":""}