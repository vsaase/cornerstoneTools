{"version":3,"sources":["webpack://cornerstoneTools/./tools/segmentation/InterpolationTool.js"],"names":["logger","getLogger","segmentationModule","getModule","InterpolationTool","props","defaultProps","name","supportedInteractionTypes","configuration","mixins","evt","_startPainting","_paint","_endPainting","getters","eventData","detail","element","image","cornerstone","external","radius","rows","columns","pixelSpacing","Math","max","rowPixelSpacing","columnPixelSpacing","stackState","getToolState","stackData","data","imageIds","labelmap2D","labelmap3D","currentImageIdIndex","activeLabelmapIndex","imagesInRange","Array","from","length","v","k","paintEventData","storeHistory","previousPixeldataForImagesInRange","i","imageIdIndex","labelmap2DForImageIdIndex","labelmap2DByImageIdIndex","previousPixeldata","pixelData","slice","push","currentPoints","x","y","getPixelData","getSegmentArray","p1","map","activeSegmentIndex","setSegmentArray","j","interpolate","i1","i2","v1","v2","d","reduce","a","b","vnext","vi","updateImage","operations","setters","labelmaps2D","segmentSet","Set","iterator","values","segmentsOnLabelmap","done","next","value","newPixelData","diff","getDiffBetweenPixelData","pushState","triggerLabelmapModifiedEvent","BaseTool"],"mappings":"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","file":"cornerstoneTools.7abe5c0e704828ff861c.hot-update.js","sourcesContent":["import external from './../../externalModules.js';\nimport BaseTool from './../base/BaseTool.js';\nimport { getModule } from './../../store/index.js';\nimport { triggerLabelmapModifiedEvent } from './../../util/segmentation';\nimport { getToolState } from '../../stateManagement/toolState.js';\nimport { getLogger } from '../../util/logger.js';\nimport { getDiffBetweenPixelData } from '../../util/segmentation';\n\nconst logger = getLogger('tools:InterpolationTool');\n\nconst segmentationModule = getModule('segmentation');\n\n/**\n * @public\n * @class InterpolationTool\n * @memberof Tools\n * @classdesc Tool for interpolating between segments across images.\n * @extends Tools.Base.BaseTool\n */\nexport default class InterpolationTool extends BaseTool {\n  constructor(props = {}) {\n    const defaultProps = {\n      name: 'Interpolation',\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {},\n      mixins: [],\n    };\n\n    super(props, defaultProps);\n  }\n\n  preMouseDownCallback(evt) {\n    this._startPainting(evt);\n    this._paint(evt);\n    this._endPainting(evt);\n\n    return true;\n  }\n\n  /**\n   *\n   * @abstract\n   * @event\n   * @param {Object} evt - The event.\n   * @returns {void}\n   */\n  _startPainting(evt) {\n    const { configuration, getters } = segmentationModule;\n    const eventData = evt.detail;\n    const { element, image } = eventData;\n    const { cornerstone } = external;\n    const radius = configuration.radius;\n    const { rows, columns } = image;\n    const pixelSpacing = Math.max(\n      image.rowPixelSpacing,\n      image.columnPixelSpacing\n    );\n\n    const stackState = getToolState(element, 'stack');\n    const stackData = stackState.data[0];\n    const { imageIds } = stackData;\n\n    const {\n      labelmap2D,\n      labelmap3D,\n      currentImageIdIndex,\n      activeLabelmapIndex,\n    } = getters.labelmap2D(element);\n\n    let imagesInRange = Array.from(\n      { length: imageIds.length },\n      (v, k) => k + 1\n    );\n\n    this.paintEventData = {\n      labelmap2D,\n      labelmap3D,\n      currentImageIdIndex,\n      activeLabelmapIndex,\n      imagesInRange,\n    };\n\n    if (configuration.storeHistory) {\n      const previousPixeldataForImagesInRange = [];\n\n      for (let i = 0; i < imagesInRange.length; i++) {\n        const { imageIdIndex } = imagesInRange[i];\n        const labelmap2DForImageIdIndex = getters.labelmap2DByImageIdIndex(\n          labelmap3D,\n          imageIdIndex,\n          rows,\n          columns\n        );\n\n        const previousPixeldata = labelmap2DForImageIdIndex.pixelData.slice();\n\n        previousPixeldataForImagesInRange.push(previousPixeldata);\n      }\n\n      this.paintEventData.previousPixeldataForImagesInRange = previousPixeldataForImagesInRange;\n    }\n  }\n\n  /**\n   * Paints the data to the labelmap.\n   *\n   * @private\n   * @param  {Object} evt The data object associated with the event.\n   * @returns {void}\n   */\n  _paint(evt) {\n    const { getters } = segmentationModule;\n    const eventData = evt.detail;\n    const image = eventData.image;\n    const { rows, columns } = image;\n    const { x, y } = eventData.currentPoints.image;\n\n    if (x < 0 || x > columns || y < 0 || y > rows) {\n      return;\n    }\n\n    const { labelmap3D, imagesInRange } = this.paintEventData;\n\n    function getPixelData(i) {\n      const labelmap2DForImageIdIndex = getters.labelmap2DByImageIdIndex(\n        labelmap3D,\n        i,\n        rows,\n        columns\n      );\n      return labelmap2DForImageIdIndex.pixelData;\n    }\n\n    function getSegmentArray(i) {\n      const p1 = getPixelData(i);\n      return p1.map(x => x == labelmap3D.activeSegmentIndex);\n    }\n\n    function setSegmentArray(i, v) {\n      var p1 = getPixelData(i);\n      for (let j = 0; j < p1.length; j++) {\n        p1[j] = v[j] ? labelmap3D.activeSegmentIndex : p1[j];\n      }\n    }\n\n    /* Algorithm for interpolation\n      find first image i1 with active segment\n      save segment as binary vector v1\n\n      until i2 > imagesInRange\n        find next image i2 with active segment\n        save segment as binary vector v2\n        d = i2 - i1\n        if d > 1\n          for i in i1+1 to i2-1\n            for j in 1:length(v1)\n              if v1[j] * (i2 - i)/d + v2[j] * (i - i1)/d > 0.5\n                v[j] = activesegment\n        v1 = v2\n        i1 = i2\n    */\n\n    function interpolate(i, i1, i2, v1, v2) {\n      const d = i2 - i1;\n      return v1.map(\n        (x, j) => (x * (i2 - i)) / d + (v2[j] * (i - i1)) / d > 0.5\n      );\n      // var out = v1.slice();\n      // for (let j = 0; j < out.length; j++) {\n      //   out[j] = (v1[j] * (i2 - i)) / d + (v2[j] * (i - i1)) / d;\n      // }\n      // return out.map(Math.round);\n    }\n\n    let i1 = 0;\n    while (i1 < imagesInRange.length - 2) {\n      //find first image i1 with active segment\n      const v1 = getSegmentArray(i1); // get segment as binary vector v1\n      if (v1.reduce((a, b) => a + b, 0) == 0) {\n        //empty, try next\n        i1++;\n        continue;\n      }\n      const vnext = getSegmentArray(i1 + 1);\n      if (vnext.reduce((a, b) => a + b, 0) > 0) {\n        //next is not empty, no need to interpolate\n        i1++;\n        continue;\n      }\n      let i2 = i1 + 2;\n      while (i2 < imagesInRange.length) {\n        // find next image i2 with active segment\n        const v2 = getSegmentArray(i2);\n        if (v2.reduce((a, b) => a + b, 0) == 0) {\n          //empty, try next\n          i2++;\n          continue;\n        }\n        for (let i = i1 + 1; i < i2; i++) {\n          const vi = interpolate(i, i1, i2, v1, v2);\n          setSegmentArray(i, vi);\n        }\n        break;\n      }\n      i1 = i2;\n    }\n\n    external.cornerstone.updateImage(evt.detail.element);\n  }\n\n  _endPainting(evt) {\n    const { labelmap3D, imagesInRange } = this.paintEventData;\n    const operations = [];\n    const { configuration, setters } = segmentationModule;\n\n    for (let i = 0; i < imagesInRange.length; i++) {\n      const { imageIdIndex } = imagesInRange[i];\n      const labelmap2D = labelmap3D.labelmaps2D[imageIdIndex];\n\n      // Grab the labels on the slice.\n      const segmentSet = new Set(labelmap2D.pixelData);\n      const iterator = segmentSet.values();\n\n      const segmentsOnLabelmap = [];\n      let done = false;\n\n      while (!done) {\n        const next = iterator.next();\n\n        done = next.done;\n\n        if (!done) {\n          segmentsOnLabelmap.push(next.value);\n        }\n      }\n\n      labelmap2D.segmentsOnLabelmap = segmentsOnLabelmap;\n\n      if (configuration.storeHistory) {\n        const { previousPixeldataForImagesInRange } = this.paintEventData;\n\n        const previousPixeldata = previousPixeldataForImagesInRange[i];\n        const labelmap2D = labelmap3D.labelmaps2D[imageIdIndex];\n        const newPixelData = labelmap2D.pixelData;\n\n        operations.push({\n          imageIdIndex,\n          diff: getDiffBetweenPixelData(previousPixeldata, newPixelData),\n        });\n      }\n    }\n\n    if (configuration.storeHistory) {\n      setters.pushState(this.element, operations);\n    }\n\n    triggerLabelmapModifiedEvent(this.element);\n  }\n}\n"],"sourceRoot":""}